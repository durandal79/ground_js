mysql = require("mysql")

Ground_Database = Meta_Object.subclass 'Ground_Database',
  connection: ''
  connect: (name)->
    #global db_url
    #global databases
    if db_url
      if is_array(db_url)
        if array_key_exists(name, db_url)
          config = db_url[name]
        else
          config = db_url['default']
      else
        config = db_url 
    else if databases
      if array_key_exists(name, databases)
        config = databases[name 'default']
      else
        throw newError('Could not find specified database.')

      # I was going to make it default to the default database
      # but that can be dangerous.
      #        $config = $databases['default']['default'];

    else
      throw newError('Currently Ground only works with Drupal 6.x and 7.x.')

    connection_string = @create_connection_string(config) 
    @connection = PDO.create(connection_string, config['username'], config['password'], []) 

  create_connection_string: (config)->
    driver = config['driver'] 
    host = config['host'] 
    database = config['database'] 
    return '$driver:host=$host;dbname=$database'

  create_table: (trellis)->
    if trellis
      throw newError('create_table() was passed a null value for $trellis.')

    table = Table.create_from_trellis(trellis) 
    sql = table.create_sql_from_trellis(trellis) 
    #    print $sql;
    if sql == ''
      throw newError('No Create SQL was generated for $trellis->name.')

    @exec(sql) 
    return table

  create_tables: (trellises)->
    for trellis of trellises
      @create_table(trellis) 
      links = trellis.get_links() 
      #      foreach ($links as $link) {
      #        if ($link->type == 'list') {
      #          $other_property = $link->get_other_property();
      #          if ($other_property && $other_property->type == 'list') {
      #            $link_class = $link->get_link_class();
      #            $join = new $link_class($other_property);
      #            $join_trellis = $join->create_trellis($trellis->ground);
      #            $this->create_table($join_trellis);
      #          }
      #        }
      #      }

  drop_all_tables: ->
    db = @connection 
    db.query('SET foreign_key_checks = 0') 
    tables = @get_tables() 
    for table of tables
      db.query('DROP TABLE IF EXISTS ' + table) 

    db.query('SET foreign_key_checks = 1') 

  get_tables: ->
    db = @connection 
    result = [] 
    rows = db.query('SHOW TABLES') 
    for row of rows
      result.push(row[0]) 

    return result

  # Return a raw query for further data extraction
  query: (sql, args)->
    query = @prepare(sql) 
    try
      query.execute(args) 

    catch ex
      throw newError(ex.getMessage() + ' \n' + sql)

    return query

  # Return an array of associative arrays
  query_array: (sql, parameters)->
    query = @query(sql, parameters) 
    return query.fetchAll()

  # Return an array of objects
  query_objects: (sql, parameters)->
    query = @query(sql, parameters) 
    # This may not be the most optimal way to get an array of objects
    # from PDO, but it functions properly for now and can be discretely
    # optimized later.
    #    return $query->fetchAll(PDO::FETCH_CLASS);

  # Return a single value
  query_value: (sql, parameters)->
    query = @query(sql, parameters) 
    return query.fetchColumn(0)

  # Return an array of single values, usually a list of ids or names
  query_values: (sql, parameters)->
    query = @query(sql, parameters) 
    #  return $query->fetchAll(PDO::FETCH_COLUMN, 0);

  last_insert_id: (name)->
    return @lastInsertId(name)

  sanitize_string: (string)->
    return preg_replace(/[^\w]/, '', string.toString())
