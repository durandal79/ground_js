mysql = require("mysql")
Meta_Hub = require('metahub')
Meta_Object = Meta_Hub.Meta_Object

Ground_Database = Meta_Object.subclass 'Ground_Database',
  connection: ''
  settings: {}

  initialize: (@settings) ->
    @settings.multipleStatements = true

#  connect: (name)->
#    connection_string = @create_connection_string(config) 
#    @connection = PDO.create(connection_string, config['username'], config['password'], []) 

#  create_connection_string: (config)->
#    driver = config['driver'] 
#    host = config['host'] 
#    database = config['database'] 
#    return '$driver:host=$host;dbname=$database'

  create_table: (trellis)->
    if trellis
      throw newError('create_table() was passed a null value for $trellis.')

    table = Table.create_from_trellis(trellis) 
    sql = table.create_sql_from_trellis(trellis) 
    if sql == ''
      throw newError('No Create SQL was generated for $trellis->name.')

    @exec(sql) 
    return table

  create_tables: (trellises)->
    for trellis of trellises
      @create_table(trellis) 
      links = trellis.get_links() 

  drop_all_tables: (callback)->
    @get_tables (tables)=>
      sql = "SET foreign_key_checks = 0;\n"
      for table in tables
        sql += "DROP TABLE IF EXISTS " + table + ";\n"

      sql += "SET foreign_key_checks = 1;\n"
      @query sql, callback

  get_tables: (callback)->
    @query 'SHOW TABLES', (rows)=>
      result = [] 
      for row in rows
        result.push(row[Object.keys(row)[0]]) 
      callback(result) if callback

  # Return a raw query for further data extraction
  query: (sql, args, success)->
    if typeof args == 'function'
      success = args
      args = undefined

    connection = mysql.createConnection @settings

    connection.connect()
    connection.query sql, (err, rows, fields) ->
      throw err  if err
      if typeof success == 'function'
        success rows, fields
    connection.end()
    
#    query = @connection.prepare(sql) 
#    try
#      query.execute(args) 
#
#    catch ex
#      throw newError(ex.getMessage() + ' \n' + sql)

#    return query

  # Return an array of associative arrays
  query_array: (sql, parameters)->
    query = @query(sql, parameters) 
    return query.fetchAll()

  # Return an array of objects
  query_objects: (sql, parameters)->
    query = @query(sql, parameters) 
    # This may not be the most optimal way to get an array of objects
    # from PDO, but it functions properly for now and can be discretely
    # optimized later.
    #    return $query->fetchAll(PDO::FETCH_CLASS);

  # Return a single value
  query_value: (sql, parameters)->
    query = @query(sql, parameters) 
    return query.fetchColumn(0)

  # Return an array of single values, usually a list of ids or names
  query_values: (sql, parameters)->
    query = @query(sql, parameters) 
    #  return $query->fetchAll(PDO::FETCH_COLUMN, 0);

  last_insert_id: (name)->
    return @connection.lastInsertId(name)

  sanitize_string: (string)->
    return preg_replace(/[^\w]/, '', string.toString())

module.exports = Ground_Database